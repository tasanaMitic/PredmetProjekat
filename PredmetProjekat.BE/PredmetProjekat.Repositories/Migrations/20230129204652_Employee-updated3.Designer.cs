// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PredmetProjekat.Repositories.Context;

#nullable disable

namespace PredmetProjekat.Repositories.Migrations
{
    [DbContext(typeof(StoreContext))]
    [Migration("20230129204652_Employee-updated3")]
    partial class Employeeupdated3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PredmetProjekat.Models.Models.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AccountType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Accounts");

                    b.HasDiscriminator<string>("AccountType").HasValue("account");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Brand", b =>
                {
                    b.Property<Guid>("BrandId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("BrandId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Category", b =>
                {
                    b.Property<Guid>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Product", b =>
                {
                    b.Property<Guid>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BrandId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Season")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProductId");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Register", b =>
                {
                    b.Property<Guid>("RegisterId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegisterCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RegisterId");

                    b.HasIndex("RegisterCode")
                        .IsUnique();

                    b.ToTable("Registers");
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Admin", b =>
                {
                    b.HasBaseType("PredmetProjekat.Models.Models.Account");

                    b.HasDiscriminator().HasValue("admin");
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Employee", b =>
                {
                    b.HasBaseType("PredmetProjekat.Models.Models.Account");

                    b.Property<string>("ManagerUsername")
                        .HasColumnType("nvarchar(450)");

                    b.HasIndex("ManagerUsername");

                    b.HasDiscriminator().HasValue("employee");
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Product", b =>
                {
                    b.HasOne("PredmetProjekat.Models.Models.Brand", "Brand")
                        .WithMany()
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PredmetProjekat.Models.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("PredmetProjekat.Models.Models.Employee", b =>
                {
                    b.HasOne("PredmetProjekat.Models.Models.Employee", "Manager")
                        .WithMany()
                        .HasForeignKey("ManagerUsername");

                    b.Navigation("Manager");
                });
#pragma warning restore 612, 618
        }
    }
}
